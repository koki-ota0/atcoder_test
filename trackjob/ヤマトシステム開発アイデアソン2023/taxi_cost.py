"""
あなたは、タクシー会社のシステムエンジニアとして、タクシー運賃を計算するプログラムの開発をすることになった。
大まかな動作は以下の通りである。
1.初乗運賃として、1km まで 400 円の定額で乗ることができる。
2.走行距離10kmまでは400mごとに40円が加算される。
3.走行距離10km以降は350m ごとに40円が加算される。
4.時速10km/以下の走行時間について、低速運賃として45秒ごとに40円が加算される。
5.深夜12時〜朝6時の間、深夜割増料金として初乗運賃や加算時の金額が50%増しになる。
6.朝6時〜9時半の間、夜8時〜深夜12時の間、ピークタイム割増料金として初乗運賃や加算時の金額が30% 増しになる。
しかし、金銭を取り扱うプログラムの開発であるため、細かな仕様に反したプログラムを作成した場合の損害が大きい。
大まかな動作だけではなく詳細な仕様を正確に把握し、プログラムを実装する必要がある。

このタクシー運賃の計算のために、タクシーは以下の三つのメーターを備え付けている。
これらのメーターには、それぞれ実数値が一つだけ記録される。
・距離メーター
・低速走行時間メーター
・運賃メーター
タクシーはメーターを更新するために、時刻と走行距離のペアであるレコードを頻繁に記録している。
レコードが記録された時刻に限って、三つのメーターにかかれた実数値が変化しえる。
レコードには二種類あり、一つ目は初乗レコードで、二つ目は走行レコードである。
・初束レコード:タクシーに乗車したときに必ず―回だけ記録されるレコードである。
    このレコードの時刻として、タクシーに乗車した時点での時刻が記録される。
    このレコードの走行距離は、常に0であることが保証される。
・走行レコード:前回のレコードからある程度の時間もしくは距離をタクシーが走ったのちに、タクシーによって記録されるレコードである。
    また、乗客がタクシーから降車するタイミングでは、このレコードが必ず記録される。
    このレコードの時刻として、タクシーがそのレコードを記録した時点での時刻が記録される。
    このレコードの走行距離として、直前のレコード取得時から現在の走行レコードの間に走行した距離が記録される。
レコードが記録されたとき、下記の「詳細な仕様」に基づいて、三つのメーターに記録された実数値のうち、少なくとも一つが変化する。
あなたは、一人の乗客が乗車して降車するまでにタクシーが出力する多くのレコードをもとに、正しい運賃を計算するプログラムを開発しなければならない。
下記の「入力形式」を満たすレコードが入力されるので、下記の「出力形式」を満たす正しい運賃を表示するプログラムを作成せよ。

入力形式
レコードは標準入力にヘッダ業無しのスペース文字で区切られた表形式データとして渡される。
13:50:08.245 0.0
13:50:11.123 4.0
13:50:12.125 10.2
13:50:13.100 8.7
● 1行目は、 初乗レコードである。
● 2行目以降の各行は、走行レコードである。
● レコードは、 時間軸に沿って並べられている。
    ○  すなわち、 i行に記録されたレコードの時刻は、 i + 1行に記録されたレコードの時刻よりも前である (1 ≤i≤n-1, ただしnは総レコード数)。
● 全ての行の末尾には必ず改行コード <LF> が付与される。
● 最終行 (最終レコードの改行コードの後) を除いて、空行は存在しない。
● 各行では、区切り文字(半角スペース) 一文字で、レコードの時刻と走行距離が区切られている。
    ○ レコードの時刻
        ● hh:mm:ss.fff 形式である。規定の桁数に満たない数字は0で埋められる。
        ● 乗車開始後に深夜24時を跨いだ場合、 hh の値は00 に戻らずに、 24, 25, ... と連番で表記される。
        ● hh が 99 を超え 3桁になることはない。 それほど長時間を走り続けることはできない。
        ● 走行レコードの場合は、 前回からのレコードからの経過時間が45秒以内である。
    ○ レコードの走行距離
        ● 初乗レコードの場合は、 走行距離には 0.0 と記載されている。
        ● 走行レコードの場合は、走行距離は以下の入力形式にしたがって記載される。
            ■走行レコードに記載された走行距離は、 メートル単位である。
            ■ 小数第一位 (10cm) 単位まで記録される。 小数第一位が0の場合は、xx.0 のように小数点の0は省略されずに記載される。
            ■走行距離の範囲は 0.0 以上 99.9 以下である
● 必ず乗車開始時、 終了時の2行以上のデータ行が含まれる。
● 乗車から降車に渡る総走行距離は 0.1 メートル以上である。
● 上記の入力形式に反する入力は、 不正な入力である。
● 入力最大行数は50000 行以内であることを前提としてよい。
    ○ すなわち、50000 行を超える入力は、 本チャレンジのテストケースに含まれておらず、このような入力を不正な入力とみなす処理を書く必要はない。
"""

import sys
import datetime

# 時間を24時間表記に変換
def convert_time(time_str):
    # 33:50:08.245
    time = datetime.time.strptime(time_str, '%H:%M:%S.%f')
    return time

def main(lines):
    records = [] # レコード
    cost = 0 # 運賃
    for l in lines:
        r = l.split(" ")
        h = int(r[0].split(":")[0])
        while h >= 24:
            h -= 24
        r[0] = str(h) + ":" + r[0].split(":")[1] + ":" + r[0].split(":")[2]
        r[0] = datetime.datetime.strptime(r[0], '%H:%M:%S.%f')
        r[1] = float(r[1])
        records.append(r)
    # 初乗りを計算
    start = records[0][0]
    if start.hour >= 0 and start.hour < 6:
        cost += 600
    elif (start.hour <= 9 and start.minute < 30) or start.hour >= 20:
        cost += 520
    else:
        cost += 400
    
    # 走行距離を計算
    dist = 0
    count = 0
    k = 0
    j = 0
    low_speed_time = 0
    count_low_speed = 0
    k_low_speed = 0
    add_cost = False
    add_low_cost = False
    for i in range(1, len(records)):
        # 距離区間を計算
        dist += records[i][1]
        if dist <= 10200:
            if dist >= 1000 + 400 * j:
                if count == j:
                    add_cost = True
                    count += 1
                    j += 1
        else:
            if dist >= 10200 + 350 * k:
                if count == 23 + k:
                    add_cost = True
                    count += 1
                    k += 1
        # 低速走行時間を計算
        if records[i][1] *36 / (records[i][0] - records[i - 1][0]).total_seconds() <= 100:
            low_speed_time += (records[i][0] - records[i - 1][0]).total_seconds()
            if low_speed_time >= 45 * (k_low_speed + 1):
                if count_low_speed == k_low_speed:
                    add_low_cost = True
                    count_low_speed += 1
                    k_low_speed += 1
        if add_cost:
            if records[i][0].hour >= 0 and records[i][0].hour < 6:
                cost += 60
            elif (records[i][0].hour <= 9 and records[i][0].minute < 30) or records[i][0].hour >= 20:
                cost += 52
            else:
                cost += 40
            add_cost = False
        if add_low_cost:
            if records[i][0].hour >= 0 and records[i][0].hour < 6:
                cost += 60
            elif (records[i][0].hour <= 9 and records[i][0].minute < 30) or records[i][0].hour >= 20:
                cost += 52
            else:
                cost += 40
            add_low_cost = False
    print(cost)

if __name__ == '__main__':
    lines = []
    for l in sys.stdin:
        lines.append(l.rstrip('\r\n'))

    main(lines)
